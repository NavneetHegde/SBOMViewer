@inherits LayoutComponentBase
@inject SbomState SbomState

@code {
    private DesignThemeModes ThemeMode = DesignThemeModes.System;

    private void SelectTheme()
    {
        ThemeMode = ThemeMode == DesignThemeModes.Light ? DesignThemeModes.Dark : DesignThemeModes.Light;
    }
}
<FluentDesignTheme Mode="@ThemeMode" StorageName="theme" OfficeColor="OfficeColor.Windows" />
<div class="app-container">
    <FluentLayout Style="height:100vh; display:flex; flex-direction:column;">

        <!-- Header -->
        <FluentHeader>
            <FluentStack HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
                <span style="font-size:2rem; font-weight:bold; font-family:'Segoe UI Semibold', 'Segoe UI', sans-serif;">
                    SBOM Viewer
                </span>
            </FluentStack>
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.DarkTheme())" OnClick="SelectTheme" Title="Theme" />
        </FluentHeader>


        <!-- Main Content -->
        <FluentStack Class="main" Orientation="Orientation.Vertical" Width="100%"
                     Style="flex:1; overflow:hidden; padding:0rem; gap:0rem;">

            <!-- Toolbar -->
            <FluentToolbar id="toolbar-fluent-components-two">
                <UploadFile />
            </FluentToolbar>

            <!-- Scrollable Content -->
            <FluentBodyContent Class="body-content" Style="flex:1; overflow:auto;">
                <ErrorBoundary>
                    <ChildContent>
                        <div class="content" style="padding:1rem; border:1px solid var(--neutral-stroke-1); border-radius:0.5rem; min-height:400px;">
                            @Body
                        </div>
                    </ChildContent>
                    <ErrorContent Context="ex">
                        <div class="blazor-error-boundary">@ex.Message</div>
                    </ErrorContent>
                </ErrorBoundary>
            </FluentBodyContent>
        </FluentStack>

        <!-- Footer -->
        <FluentFooter Style="padding:0.5rem; display:flex; justify-content:center; align-items:center; font-size:0.85rem; color:var(--neutral-foreground-2); border-top:1px solid var(--neutral-stroke-1); flex-shrink:0;">
            Â© 2025. Licensed under the MIT License. SBOM Viewer v2.0.0
        </FluentFooter>

    </FluentLayout>
</div>

@code {

    private SbomFormat SelectedSbomFormat = SbomFormat.CycloneDX_1_6;

    private string SelectedSbomFormatString
    {
        get => SelectedSbomFormat.ToString();
        set
        {
            if (Enum.TryParse<SbomFormat>(value, out var result))
            {
                SelectedSbomFormat = result;
            }
        }
    }

    async Task OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        foreach (var file in files)
        {
            if (file?.Stream is null)
                continue;

            using var reader = new StreamReader(file.Stream);
            string content = await reader.ReadToEndAsync();

            if (SelectedSbomFormat == SbomFormat.SPDX_2_2)
            {
                SbomState.SpdxData = SpdxParser.ParseSpdxJsonAsync(content).Result;
                SbomState.SpdxFileName = file.Name;
            }
            else if (SelectedSbomFormat == SbomFormat.CycloneDX_1_6)
            {
                SbomState.CycloneDXData = CycloneDXParser.ParseCycloneDXBomJsonAsyncParseJson(content).Result;
                SbomState.CycloneDXFileName = file.Name;
            }
        }

        StateHasChanged(); // refresh MainLayout + pages
    }
}

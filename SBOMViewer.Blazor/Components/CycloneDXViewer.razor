@using SBOMViewer.Blazor.Models.CycloneDX
@using Microsoft.FluentUI.AspNetCore.Components

@code {
    [Parameter] public CycloneDXDocument? Document { get; set; }
    [Parameter] public string? DocumentFileName { get; set; }

    private string componentSearch = string.Empty;
}

@if (Document != null)
{

    <FluentCard Style="background-color:var(--neutral-layer1); color:var(--neutral-foreground-rest); padding:1rem;">
        <!-- Document Filename Centered -->
        <div style="display:flex; align-items:center; justify-content:center; gap:0.5rem; margin-bottom:1rem;">
            <FluentIcon Value="@(new Icons.Regular.Size24.DocumentTextExtract())" />
            <span style="font-weight:bold; font-size:1.1rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;"
                  title="@DocumentFileName">
                @DocumentFileName
            </span>
        </div>

        <FluentAccordion>
            <!-- General Information -->
            <FluentAccordionItem Expanded="true">
                <HeadingTemplate>
                    <div style="display:flex; align-items:center; gap:0.5rem;">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Info())" />
                        <span>General Information</span>
                    </div>
                </HeadingTemplate>
                <ChildContent>
                    <div class="info-container">
                        <div><strong>Format:</strong> @Document.BomFormat</div>
                        <div><strong>Spec Version:</strong> @Document.SpecVersion</div>
                        <div><strong>Serial Number:</strong> @Document.SerialNumber</div>
                        <div><strong>Version:</strong> @Document.Version</div>
                    </div>
                </ChildContent>
            </FluentAccordionItem>

            <FluentDivider />

            <!-- Metadata -->
            <FluentAccordionItem Expanded="true">
                <HeadingTemplate>
                    <div style="display:flex; align-items:center; gap:0.5rem;">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Tab())" />
                        <span>Metadata</span>
                    </div>
                </HeadingTemplate>
                <ChildContent>
                    <div>
                        <div><strong>Timestamp:</strong> @Document.Metadata.Timestamp</div>

                        <div><strong>Tools:</strong></div>
                        <ul>
                            @foreach (var tool in Document.Metadata.Tools)
                            {
                                <li>@tool.Name (@tool.Vendor) - @tool.Version</li>
                            }
                        </ul>
                    </div>
                </ChildContent>
            </FluentAccordionItem>

            <FluentDivider />

            <!-- Components -->
            <FluentAccordionItem>
                <HeadingTemplate>
                    <div style="display:flex; align-items:center; gap:0.5rem;">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Layer())" />
                        <span>Components | @Document.Components.Count()</span>
                    </div>
                </HeadingTemplate>
                <ChildContent>
                    <div style="display:flex; flex-direction:column; gap:0.5rem;">
                        <!-- Search Input -->
                        <FluentSearch @bind-Value="componentSearch" Style="width:100%" Placeholder="Search components" AutoComplete="off" />

                        <!-- Scrollable component list -->
                        <div class="scroll-container" style="max-height:400px; overflow-y:auto; padding-right:0.5rem;">
                            @foreach (var component in Document.Components
                                                    .Where(c => string.IsNullOrWhiteSpace(componentSearch)
                                                    || c.Name.Contains(componentSearch, StringComparison.OrdinalIgnoreCase))
                                                    .OrderBy(c => c.Name))
                            {
                                <details>
                                    <summary>@component.Name (@component.Version | @component.Scope)</summary>
                                    <div><span><strong>Description: </strong> @component.Description</span></div>
                                    <div><span><strong>Type: </strong> @component.Type</span></div>
                                    <div><span><strong>Bom-ref :</strong> @component.BomRef</span></div>
                                    <div><span><strong>Copyright:</strong> @component.Copyright</span></div>
                                    <div><span><strong>Purl:</strong> @component.Purl</span></div>
                                    <div><span><strong>Authors</strong></span></div>
                                    <ul>
                                        @if (component.Authors != null)
                                        {
                                            @foreach (var author in component.Authors)
                                            {
                                                <li>@author.Name</li>
                                            }
                                        }
                                    </ul>
                                    <div><span><strong>Hashes</strong></span></div>
                                    <ul>
                                        @if (component.Hashes != null)
                                        {
                                            @foreach (var hash in component.Hashes)
                                            {
                                                <li>@hash.Algorithm : (@hash.Content)</li>
                                            }
                                        }
                                    </ul>
                                    <div><span><strong>Licenses</strong></span></div>
                                    <ul>
                                        @if (component.Licenses != null)
                                        {
                                            @foreach (var license in component.Licenses)
                                            {
                                                <li>@license.License.Name (@license.License.Id | @license.License.Url)</li>
                                            }
                                        }
                                    </ul>
                                    <div><span><strong>ExternalReferences</strong></span></div>
                                    <ul>
                                        @if (component.ExternalReferences != null)
                                        {
                                            @foreach (var extRef in component.ExternalReferences)
                                            {
                                                <li>@extRef.Type : @extRef.Url</li>
                                            }
                                        }
                                    </ul>
                                </details>
                            }
                        </div>
                    </div>
                </ChildContent>
            </FluentAccordionItem>

            <FluentDivider />

            <!-- Dependencies -->
            <FluentAccordionItem>
                <HeadingTemplate>
                    <div style="display:flex; align-items:center; gap:0.5rem;">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Link())" />
                        <span>Dependencies | @Document.Dependencies?.Count()</span>
                    </div>
                </HeadingTemplate>
                <ChildContent>
                    <div class="scroll-container" style="max-height:400px; overflow-y:auto; padding-right:0.5rem;">
                        <div class="scroll-container">
                            @if (Document.Dependencies != null)
                            {
                                @foreach (var dependency in Document.Dependencies)
                                {
                                    <details>
                                        <summary>@dependency.Ref | #@dependency.DependsOn?.Count()</summary>
                                        <ul>
                                            @if (dependency.DependsOn?.Count() > 0)
                                            {
                                                @foreach (var depends in dependency.DependsOn)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(depends?.ToString()))
                                                    {
                                                        <li class="depends-on">@depends?.ToString()</li>
                                                    }
                                                }
                                            }
                                        </ul>
                                    </details>
                                }
                            }
                        </div>
                    </div>
                </ChildContent>
            </FluentAccordionItem>

        </FluentAccordion>
    </FluentCard>
}



